// app.component.ts - Integration with Electron
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CollectionSidebarComponent, TreeNode, CollectionFile, OpenAPIDocument } from './collection-sidebar.component';
import { CollectionStorageService } from './collection-storage.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, CollectionSidebarComponent],
  template: `
    <div class="flex h-screen">
      <app-collection-sidebar 
        [treeData]="sidebarData" 
        (nodeChanged)="handleNodeChange($event)"
        (widthChanged)="handleWidthChange($event)"
        (importData)="handleImport($event)"
        (importOpenAPIData)="handleOpenAPIImport($event)">
      </app-collection-sidebar>
      
      <div class="flex-1 p-6 overflow-auto">
        <h1 class="text-2xl font-bold mb-4">API Client</h1>
        
        <div class="bg-gray-100 rounded-md p-4 mb-4" *ngIf="isElectron">
          <h2 class="text-lg font-semibold mb-2">Workspace:</h2>
          <div class="text-sm bg-white p-2 rounded">{{ workspacePath }}</div>
        </div>
        
        <div class="bg-gray-100 rounded-md p-4 mb-4">
          <h2 class="text-lg font-semibold mb-2">Recent Action:</h2>
          <pre class="bg-white p-3 rounded shadow-sm max-h-40 overflow-auto">{{ lastAction | json }}</pre>
        </div>
        
        <!-- Your API request handling UI goes here -->
        <div class="bg-white p-4 border rounded-md shadow-sm">
          <h3 class="text-lg font-medium mb-3">Request Panel</h3>
          <p class="text-gray-600">Select a request from the sidebar to view and edit details</p>
        </div>
      </div>
    </div>
  `
})
export class AppComponent implements OnInit {
  sidebarData: TreeNode[] = [];
  lastAction: any = null;
  isElectron = false;
  workspacePath = '';
  
  constructor(private collectionService: CollectionStorageService) {
    this.isElectron = this.collectionService.isElectron;
  }
  
  async ngOnInit() {
    // Load collections when the app starts
    try {
      this.sidebarData = await this.collectionService.loadCollections();
      this.workspacePath = this.collectionService.lastLoadedWorkspace;
      
      if (this.sidebarData.length === 0) {
        // Create a default collection if none exists
        this.addDefaultCollection();
      }
    } catch (error) {
      console.error('Error loading collections:', error);
      this.addDefaultCollection();
    }
  }
  
  handleNodeChange(event: { action: string; node: TreeNode; parent?: TreeNode }): void {
    this.lastAction = event;
    console.log('Node changed:', event);
    
    // Save the updated collections
    this.saveCollections();
  }
  
  handleWidthChange(width: number): void {
    // No need to save this value as it's UI state
  }
  
  handleImport(data: CollectionFile): void {
    // Generate new IDs for all imported items to avoid conflicts
    const regenerateIds = (nodes: TreeNode[]): TreeNode[] => {
      return nodes.map(node => {
        const newNode = {...node, id: this.generateId()};
        if (newNode.children) {
          newNode.children = regenerateIds(newNode.children);
        }
        return newNode;
      });
    };
    
    const processedItems = regenerateIds(data.items);
    
    // Add imported items to the sidebar
    this.sidebarData = [...this.sidebarData, ...processedItems];
    
    this.lastAction = { action: 'import', count: processedItems.length };
    
    // Save the updated collections
    this.saveCollections();
  }
  
  handleOpenAPIImport(data: { openapi: OpenAPIDocument, collection: TreeNode[] }): void {
    // Add the generated collection to the sidebar
    if (data.collection && data.collection.length > 0) {
      this.sidebarData = [...this.sidebarData, ...data.collection];
      
      this.lastAction = { 
        action: 'import-openapi', 
        name: data.openapi.info.title,
        version: data.openapi.info.version
      };
      
      // Save the updated collections
      this.saveCollections();
    }
  }
  
  private addDefaultCollection(): void {
    // Add a default collection
    const defaultCollection: TreeNode = {
      id: this.generateId(),
      type: 'folder',
      name: 'My First Collection',
      expanded: true,
      children: [
        {
          id: this.generateId(),
          type: 'request',
          name: 'Example Request',
          method: 'GET',
          url: 'https://jsonplaceholder.typicode.com/todos/1',
          headers: {
            'Content-Type': 'application/json'
          }
        }
      ]
    };
    
    this.sidebarData = [defaultCollection];
    
    // Save the default collection
    this.saveCollections();
  }
  
  private saveCollections(): void {
    // Save collections to storage
    this.collectionService.saveCollections(this.sidebarData)
      .catch(error => console.error('Error saving collections:', error));
  }
  
  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substring(2);
  }
}